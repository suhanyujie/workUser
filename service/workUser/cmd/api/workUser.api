syntax = "v2"

type (
	CreateUserReq {
		UserName string `json:"userName"`
		Pwd      string `json:"pwd"`
	}

	CreateUserResp {
		Code    int     `json:"code"`
		Message string  `json:"message"`
		Data    OneUser `json:"data"`
	}

	FindUserResp {
		Code    int     `json:"code"`
		Message string  `json:"message"`
		Data    OneUser `json:"data"`
	}

	OneUser {
		Id       int64  `json:"id"`
		UserName string `json:"userName"`
	}

	UserListReq {
		Ids      []int64 `json:"ids,optional"`
		NickName string  `json:"nickName,optional"`
	}

	UserListRespVo {
		Code    int                `json:"code"`
		Message string             `json:"message"`
		Data    UserListRespVoData `json:"data"`
	}

	UserListRespVoData {
		List  []OneUser `json:"list"`
		Total int64     `json:"total"`
		Page  int       `json:"page"`
		Size  int       `json:"size"`
	}
)

type Request {
	Name string `path:"name,options=you|me"`
}

type ResponseVo {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}
type IsOkResponse {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}

service workUser-api {
	@handler CreateUser
	post /user/create(CreateUserReq) returns(CreateUserResp)
	@handler FindUser
	get /user/find/:userId () returns(FindUserResp)
	@handler UserList
	post /user/list(UserListReq) returns(UserListRespVo)
	@handler UserDelete
	delete /user/delete/:userId () returns(ResponseVo)
}